
# -*- coding: utf-8 -*-
import logging
from telegram import Update, ReplyKeyboardMarkup, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from apscheduler.schedulers.background import BackgroundScheduler
import datetime
import random
import asyncio

TOKEN = "8318731976:AAGRLByy52ordZtigWkkQ-Ux2Hf7x7AiLIE"
YOUR_CHAT_ID = 412770085
ADMIN_PASSWORD = "1379"

tasks = []
tasks_status = {}
completed_history = []
evaluation_log = []
future_tasks = []
repeatable_tasks = {
    "monday": ["üóÇÔ∏è –ü–ª–∞–Ω –Ω–∞ –Ω–µ–¥–µ–ª—é"],
    "friday": ["üí∏ –§–∏–Ω–∞–Ω—Å—ã"]
}

motivational_quotes = [
    "–î–∞–∂–µ —Å–∞–º–∞—è –¥–ª–∏–Ω–Ω–∞—è –¥–æ—Ä–æ–≥–∞ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.",
    "–°–µ–≥–æ–¥–Ω—è—à–Ω–∏–µ —É—Å–∏–ª–∏—è ‚Äî —ç—Ç–æ –∑–∞–≤—Ç—Ä–∞—à–Ω–∏–µ –ø–æ–±–µ–¥—ã!",
    "–¢—ã —Å–æ–∑–¥–∞—ë—à—å —Å–∏—Å—Ç–µ–º—É, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ä–µ—à–∞–µ—à—å –∑–∞–¥–∞—á–∏.",
    "–†–∞–±–æ—Ç–∞–µ—à—å —Å–∞–º –Ω–∞ —Å–µ–±—è ‚Äî –Ω–µ –∂–∞–ª–µ–π —É—Å–∏–ª–∏–π!",
    "–ö–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî —à–∞–Ω—Å —Å—Ç–∞—Ç—å –ª—É—á—à–µ, —á–µ–º –≤—á–µ—Ä–∞."
]

logging.basicConfig(level=logging.INFO)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"–í–∞—à chat_id: {update.effective_chat.id}")
    keyboard = [
        ["üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", "üìÜ –ó–∞–≤—Ç—Ä–∞"],
        ["ü§ñ AI-—Ä–µ–∂–∏–º", "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"],
        ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", "‚≠ê –û—Ü–µ–Ω–∏—Ç—å –¥–µ–Ω—å"],
        ["‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞"]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç, –¢—É–º—ç–Ω –ë–∞—è—Ä–æ–≤–∏—á! –Ø –Ω–∞ —Å–≤—è–∑–∏ üí™", reply_markup=reply_markup)

async def tasks_today(update: Update, context: ContextTypes.DEFAULT_TYPE):
    today = datetime.date.today().strftime("%d.%m.%Y")
    if not tasks:
        await update.message.reply_text("–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    msg = f"üìã –ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today}):\n"
    for i, task in enumerate(tasks, 1):
        msg += f"{i}. {task} ‚Äî [{tasks_status.get(i, '–Ω–µ –Ω–∞—á–∞—Ç–æ')}]\n"
    await update.message.reply_text(msg)

async def show_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if future_tasks:
        msg = "üìÜ –ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞:\n"
        for i, task in enumerate(future_tasks, 1):
            msg += f"{i}. {task}\n"
        await update.message.reply_text(msg)
    else:
        await update.message.reply_text("–ü–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ–∫–∞ –Ω–µ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω.")

async def add_to_tomorrow(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip()
    if msg.startswith("/v_zavtra"):
        content = msg[9:].strip()
        if content:
            future_tasks.append(content)
            await update.message.reply_text(f"–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø–ª–∞–Ω –Ω–∞ –∑–∞–≤—Ç—Ä–∞: {content}")

async def show_ai_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    quote = random.choice(motivational_quotes)
    done = sum(1 for s in tasks_status.values() if s == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    total = len(tasks)
    percent = int(done / total * 100) if total else 0
    await update.message.reply_text(f"üß† –ú–æ—Ç–∏–≤–∞—Ü–∏—è: {quote}\n–°–µ–≥–æ–¥–Ω—è: {done}/{total} –∑–∞–¥–∞—á ({percent}%)")

async def show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    done = sum(1 for _, _ in completed_history)
    postponed = sum(1 for s in tasks_status.values() if s == "–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ")
    in_progress = sum(1 for s in tasks_status.values() if s == "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ")
    await update.message.reply_text(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\nüîÅ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {postponed}\nüü° –í –ø—Ä–æ—Ü–µ—Å—Å–µ: {in_progress}")

async def send_task_reminder(context: ContextTypes.DEFAULT_TYPE):
    task_text = context.job.data.get("text", "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ")
    reply_markup = InlineKeyboardMarkup.from_button(
        InlineKeyboardButton("üîÅ –ù–∞–ø–æ–º–Ω–∏—Ç—å –ø–æ–∑–∂–µ", callback_data="remind_later")
    )
    await context.bot.send_message(chat_id=YOUR_CHAT_ID, text=task_text, reply_markup=reply_markup)

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if query.data == "remind_later":
        await query.edit_message_text(text="‚è≥ –ù–∞–ø–æ–º–Ω—é –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç...")
        context.job_queue.run_once(send_task_reminder, 600, data={"text": query.message.text})

async def protected_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.args and context.args[0] == ADMIN_PASSWORD:
        await update.message.reply_text("üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω.")
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å.")

def inject_repeating_tasks():
    weekday = datetime.datetime.today().strftime('%A').lower()
    repeated = repeatable_tasks.get(weekday, [])
    for task in repeated:
        tasks.append(task)
        tasks_status[len(tasks)] = "–Ω–µ –Ω–∞—á–∞—Ç–æ"

async def monday_report():
    done = sum(1 for s in tasks_status.values() if s == "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
    total = len(tasks)
    return f"üóìÔ∏è –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç:\n–ó–∞–¥–∞—á: {total}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {done}\nüî• –ù–æ–≤–∞—è –Ω–µ–¥–µ–ª—è ‚Äî –Ω–æ–≤—ã–µ –ø–æ–¥–≤–∏–≥–∏!"

async def update_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.message.text.strip().lower()
    if msg == "üìã –∑–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":
        await tasks_today(update, context)
        return
    if msg == "üìÜ –∑–∞–≤—Ç—Ä–∞":
        await show_tomorrow(update, context)
        return
    if msg == "‚≠ê –æ—Ü–µ–Ω–∏—Ç—å –¥–µ–Ω—å":
        await update.message.reply_text("–û—Ü–µ–Ω–∏ –¥–µ–Ω—å –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5:")
        return
    if msg == "‚ÑπÔ∏è —Å–ø—Ä–∞–≤–∫–∞":
        await update.message.reply_text("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/tasks, /zavtra, /ai, /stats\n/v_zavtra [—Ç–µ–∫—Å—Ç] ‚Äî –∑–∞–¥–∞—á–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞")
        return
    if msg == "‚ûï –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É":
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /v_zavtra –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
        return
    if msg.startswith("/v_zavtra"):
        await add_to_tomorrow(update, context)
        return
    if msg == "/ai" or msg == "ü§ñ ai-—Ä–µ–∂–∏–º":
        await show_ai_mode(update, context)
        return
    if msg == "/stats" or msg == "üìä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
        await show_stats(update, context)
        return
    if msg in ["1", "2", "3", "4", "5"]:
        evaluation_log.append((datetime.date.today(), int(msg)))
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –û—Ü–µ–Ω–∫–∞ –∑–∞–ø–∏—Å–∞–Ω–∞.")
        return
    parts = msg.split("-")
    if len(parts) == 2:
        try:
            num = int(parts[0].strip())
            action = parts[1].strip()
            if num in tasks_status:
                if "–Ω–∞—á–∞–ª" in action:
                    tasks_status[num] = "–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"
                elif "–≥–æ—Ç–æ–≤–æ" in action:
                    tasks_status[num] = "–≤—ã–ø–æ–ª–Ω–µ–Ω–æ"
                    completed_history.append((datetime.datetime.now(), tasks[num - 1]))
                elif "–ø–µ—Ä–µ–Ω–æ—Å" in action:
                    tasks_status[num] = "–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ"
                await update.message.reply_text(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ: {num}. {tasks[num - 1]} ‚Äî [{tasks_status[num]}]")
        except:
            pass

def main():
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tasks", tasks_today))
    app.add_handler(CommandHandler("zavtra", show_tomorrow))
    app.add_handler(CommandHandler("ai", show_ai_mode))
    app.add_handler(CommandHandler("stats", show_stats))
    app.add_handler(CommandHandler("admin", protected_command))
    app.add_handler(CallbackQueryHandler(handle_callback))
    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), update_status))

    scheduler = BackgroundScheduler(timezone="Europe/Moscow")
    scheduler.add_job(inject_repeating_tasks, 'cron', hour=7, minute=0)
    scheduler.add_job(lambda: asyncio.run(app.bot.send_message(chat_id=YOUR_CHAT_ID, text=asyncio.run(monday_report()))), 'cron', day_of_week='mon', hour=9, minute=0)
    scheduler.start()

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
